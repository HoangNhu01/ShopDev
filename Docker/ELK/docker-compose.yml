version: "3.8"

services:
  setup:
    container_name: setup
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - elastic-certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 777 \{\} \;;
        find . -type f -exec chmod 777 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt http://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -d config ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    container_name: es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - elastic-certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      #- discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false #táº¯t ssl
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    networks:
      sd_network:
        ipv4_address: 10.0.0.16
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl http://localhost:9200",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    # profiles:
    #   - donotstart
    volumes:
      - elastic-certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    networks:
      sd_network:
        ipv4_address: 10.0.0.17
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
      
  logstash:
    depends_on:
      es01:
        condition: service_healthy
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    volumes:
      - elastic-certs:/usr/share/logstash/config/certs
      - ${PWD}/logstash/pipeline:/usr/share/logstash/pipeline
      - ${PWD}/logstash/jdbc:/usr/share/logstash/jdbc
      - ${PWD}/logstash/certs:/usr/share/logstash/certs
    ports:
      - ${LOGSTASH_PORT}:9600
      - 9601:8080
    # extra_hosts:
    #   - "meeytest-rabbitmq.meeytest.svc.cluster.local:10.100.10.69"
    environment:
      - ELASTICSEARCH_HOSTS=http://es01:9200
      # - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/logstash/config/certs/ca/ca.crt
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - CONFIG_RELOAD_AUTOMATIC=true
      # - ORACLE_JDBC=/usr/share/logstash/jdbc/ojdbc11.jar
      - xpack.monitoring.elasticsearch.hosts=http://es01:9200
      - XPACK_MONITORING_ENABLED=false
      - RABBITMQ_HOST=10.0.0.14
      - RABBITMQ_USER=user
      - RABBITMQ_PASSWORD=123@123abc
      - RABBITMQ_PORT=5672
      - RABBITMQ_VHOST=/
      # - RABBITMQ_SSL_CER_PATH=/usr/share/logstash/certs/k8s-meey-ca.pfx
      # - RABBITMQ_SSL_CER_PASSWORD=
    # command: >
    #   bash -c '/usr/share/logstash/jdk/bin/keytool -importcert -file /usr/share/logstash/certs/k8s-meey-ca.crt -trustcacerts -storetype PKCS12'
    networks:
      sd_network:
        ipv4_address: 10.0.0.18

volumes:
  elastic-certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local

networks:
  sd_network:
      name: sd_sd_network
      external: true

# networks:
#   sd_network:
#     driver: bridge
#     ipam:
#       config:
#         - subnet: 10.0.0.0/24